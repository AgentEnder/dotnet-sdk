<Project>

  <PropertyGroup>
    <GenerateMsisDependsOn Condition="'$(GenerateSdkBundleOnly)' != 'true'">
      GenerateSdkMsi;
      GenerateTemplatesMsis;
      GenerateSdkPlaceholderMsi
    </GenerateMsisDependsOn>
    <GenerateMsisDependsOn>$(GenerateMsisDependsOn);GenerateSdkBundle</GenerateMsisDependsOn>

    <GenerateSdkBundleDependsOn>
      DownloadBundledComponents;
      AcquireWix;
      MsiTargetsSetupInputOutputs;
      GenerateWorkloadManifestsWxs
    </GenerateSdkBundleDependsOn>
    <!-- When building the sdk bundle only, the sdk and template msis are acquired via DownloadBundledComponents. -->
    <GenerateSdkBundleDependsOn Condition="'$(GenerateSdkBundleOnly)' != 'true'">$(GenerateSdkBundleDependsOn);GenerateSdkMsi;GenerateTemplatesMsis</GenerateSdkBundleDependsOn>
  </PropertyGroup>

  <!-- AcquireWix Properties -->
  <PropertyGroup>
    <WixDownloadUrl>https://netcorenativeassets.blob.core.windows.net/resource-packages/external/windows/wix/Microsoft.Signed.Wix-$(MicrosoftSignedWixVersion).zip</WixDownloadUrl>
    <WixRoot>$(ArtifactsDir)Tools/WixTools/$(MicrosoftSignedWixVersion)</WixRoot>
    <WixDestinationPath>$(WixRoot)/WixTools.$(MicrosoftSignedWixVersion).zip</WixDestinationPath>
    <WixDownloadSentinel>$(WixRoot)/WixDownload.$(MicrosoftSignedWixVersion).sentinel</WixDownloadSentinel>
  </PropertyGroup>

  <!-- Generate MSI/Bundle Properties -->
  <PropertyGroup>
    <SdkPkgSourcesWindowsDirectory>$(SdkPkgSourcesRootDirectory)windows</SdkPkgSourcesWindowsDirectory>
    <SdkGenerateMsiPowershellScript>$(SdkPkgSourcesWindowsDirectory)\generatemsi.ps1</SdkGenerateMsiPowershellScript>
    <SdkGenerateBundlePowershellScript>$(SdkPkgSourcesWindowsDirectory)\generatebundle.ps1</SdkGenerateBundlePowershellScript>

    <FinalizerExe>$(ArtifactsBinDir)finalizer\win-$(TargetArchitecture)\$(Configuration)\bin\finalizer.exe</FinalizerExe>

    <!-- Temp directory for light command layouts -->
    <LightCommandObjDir>$(ArtifactsObjDir)LightCommandPackages</LightCommandObjDir>
    <!-- Directory for the zipped up light command package -->
    <LightCommandPackagesDir>$(ArtifactsNonShippingPackagesDir)</LightCommandPackagesDir>

    <!-- for local SDK builds we allow skipping the workload manifest msi generation to save build time, the sdk bundle won't contain the manifest msis in that case. -->
    <AllowEmptyBuiltinWorkloadManifestMsi Condition="'$(DotNetBuild)' != 'true' and '$(BuildWorkloads)' != 'true' and '$(OfficialBuild)' != 'true'">true</AllowEmptyBuiltinWorkloadManifestMsi>
  </PropertyGroup>

  <PropertyGroup>
    <SdkDependencyKeyName>Dotnet_CLI</SdkDependencyKeyName>
    <CombinedFrameworkSdkHostMSIInstallerFile>$(ArtifactsShippingPackagesDir)$(ArtifactNameWithVersionCombinedHostHostFxrFrameworkSdk)$(BundleExtension)</CombinedFrameworkSdkHostMSIInstallerFile>

    <!-- Warning: Changing the value "SdkBundleInstallerOutputGuidString" can only occur on a product-band boundary [CliProductBandVersion],
                  Changing "SdkBundleInstallerOutputGuidString" mid-product-band will break the upgradability of the SDK bundle installer. -->
    <SdkBundleInstallerOutputGuidString>Dotnet SDK Bundle Installer $(CliProductBandVersion) $(ProductMonikerRid)</SdkBundleInstallerOutputGuidString>
  </PropertyGroup>

  <!-- This target relies on tasks from the Microsoft.DotNet.Build.Tasks.Installers package. -->
  <Target Name="MsiTargetsSetupInputOutputs" DependsOnTargets="GetAssemblyVersion">
    <PropertyGroup>
      <!-- This number comes from arcade and combines the date based build number id and the revision (incremental number per day)
           Fallback to 0 when patch number is not set. This happens only during CI. -->
      <CombinedBuildNumberAndRevision>$([MSBuild]::ValueOrDefault('$(_PatchNumber)', '000000'))</CombinedBuildNumberAndRevision>

      <!-- This number comes from arcade and combines the date based build number id and the revision (incremental number per day). This number is
           a 4-part version. -->
      <BundleVersion>$(FileVersion)</BundleVersion>
    </PropertyGroup>

    <!-- MSI versions are 32-bit integers. See https://docs.microsoft.com/en-us/windows/win32/msi/productversion for more detail. -->
    <GenerateMsiVersion BuildNumber="$(CombinedBuildNumberAndRevision)"
                        Major="$(VersionMajor)"
                        Minor="$(VersionMinor)"
                        Patch="$(VersionFeature)">
      <Output TaskParameter="MsiVersion" PropertyName="ProductVersion" />
    </GenerateMsiVersion>
  </Target>

  <Target Name="AcquireWix"
          DependsOnTargets="MsiTargetsSetupInputOutputs"
          Inputs="$(WixDownloadSentinel)"
          Outputs="$(WixDestinationPath)">
    <!-- Setup sentinel to take advantage of incrementality -->
    <MakeDir Directories="$(WixRoot)" />
    <WriteLinesToFile
        File="$(WixDownloadSentinel)"
        Lines="$(MicrosoftSignedWixVersion)"
        Overwrite="true"
        Encoding="Unicode" />

    <DownloadFile
        Uri="$(WixDownloadUrl)"
        DestinationPath="$(WixDestinationPath)"
        Overwrite="false" />

    <ExtractArchiveToDirectory
        SourceArchive="$(WixDestinationPath)"
        DestinationDirectory="$(WixRoot)" />
  </Target>

  <Target Name="GenerateSdkMsi"
          DependsOnTargets="GenerateInstallerLayout;MsiTargetsSetupInputOutputs;PrepareIntermediateSdkInstallerOutput"
          Inputs="$(IntermediateSdkInstallerOutputPath)**/*"
          Outputs="$(SdkMSIInstallerFile)">

    <MSBuild Projects="$(RepoRoot)src\Layout\pkg\windows\msis\toolset\toolset.wixproj"
             Properties="InstallerPath=$(SdkMSIInstallerFile);ProductVersion=$(ProductVersion);BundleVersion=$(BundleVersion);
                         Version=$(Version);
                         SdkLayoutDirectoryToHarvest=$(IntermediateSdkInstallerOutputPath.TrimEnd('\'));
                         DotnetSrc=$(IntermediateSdkInstallerOutputPath.TrimEnd('\'))"/>
  </Target>

  <Target Name="GenerateSdkPlaceholderMsi"
          DependsOnTargets="MsiTargetsSetupInputOutputs"
          Inputs="$(RepoRoot)src\Layout\pkg\windows\msis\placeholder\placeholder.wixproj"
          Outputs="$(SdkPlaceholderMSIInstallerFile)">

    <MSBuild Projects="$(RepoRoot)src\Layout\pkg\windows\msis\placeholder\placeholder.wixproj"
             Properties="InstallerPath=$(SdkPlaceholderMSIInstallerFile);ProductVersion=$(ProductVersion);BundleVersion=$(BundleVersion)"/>
  </Target>

  <Target Name="GenerateTemplatesMsis"
          DependsOnTargets="GenerateInstallerLayout;MsiTargetsSetupInputOutputs;CalculateTemplatesVersions"
          Inputs="@(TemplatesComponents);C:\git\forks\sdk\src\Layout\pkg\windows\msis\**\*"
          Outputs="%(TemplatesComponents.MSIInstallerFile)">

    <ItemGroup>
      <TemplatesMsi Include="@(TemplatesComponents)">
        <LayoutPath>$(IntermediateOutputPath)templates-%(TemplatesComponents.TemplatesMajorMinorVersion)</LayoutPath>
        <BrandName>%(TemplatesComponents.BrandNameWithoutVersion) $(Version)</BrandName>
        <DependencyKeyName>NetCore_Templates_%(TemplatesComponents.TemplatesMajorMinorVersion)</DependencyKeyName>
        <UpgradeCode>%(TemplatesComponents.InstallerUpgradeCode)</UpgradeCode>
        <Project>$(RepoRoot)src\Layout\pkg\windows\msis\templates\templates.wixproj</Project>
      </TemplatesMsi>
    </ItemGroup>

    <MSBuild Projects="%(TemplatesMsi.Project)" Targets="Clean;Build"
             Properties="InstallerPath=%(MSIInstallerFile);ProductVersion=$(ProductVersion);DependencyKeyName=%(DependencyKeyName);TemplateLayoutDirectoryToHarvest=%(LayoutPath);
                         BrandName=%(BrandName);UpgradeCode=%(UpgradeCode); 
                         DotnetSrc=%(LayoutPath)"/>
  </Target>

  <Target Name="UnzipBuiltinWorkloadManifestMsiNuPkg">
    <PropertyGroup>
      <BuiltinManifestMsiPackageSourceDirectory>$(ArtifactsShippingPackagesDir)</BuiltinManifestMsiPackageSourceDirectory>
      <BuiltinManifestMsiPackageSourceDirectory Condition="'$(DotNetBuild)' != 'true' and '$(BuildWorkloads)' != 'true' and '$(OfficialBuild)' == 'true'">$(ArtifactsDir)downloaded-manifest-msi-packages\PackageArtifacts</BuiltinManifestMsiPackageSourceDirectory>
      <BuiltinManifestMsiPackageSourceDirectory Condition="'$(DotNetBuild)' == 'true' and '$(DotNetBuildPass)' == '3'">$(SourceBuiltShippingPackagesDir)</BuiltinManifestMsiPackageSourceDirectory>
    </PropertyGroup>

    <ItemGroup>
      <_builtinManifestMsiPackages Include="$(BuiltinManifestMsiPackageSourceDirectory)/%(BuiltinManifests.Identity).Manifest-*.Msi.$(MsiArchitectureForWorkloadManifests)*.nupkg" />
      <BuiltinManifestMsiPackages Include="@(_builtinManifestMsiPackages)" UnzipDestinationFolder="$(IntermediateOutputPath)\extracted-manifests\%(Filename)" />
    </ItemGroup>

    <Message Text="Builtin workload manifest msi packages were skipped, the SDK installer .exe bundle won't contain the builtin manifests and workload installs will be broken. Pass /p:BuildWorkloads=true to enable building them."
             Importance="High"
             Condition="'@(BuiltinManifestMsiPackages)' == '' and '$(AllowEmptyBuiltinWorkloadManifestMsi)' == 'true'" />

    <Error Text="Could not find expected builtin manifest msi packages in $(BuiltinManifestMsiPackageSourceDirectory)"
           Condition="'@(BuiltinManifestMsiPackages)' == '' and '$(AllowEmptyBuiltinWorkloadManifestMsi)' != 'true'" />

    <Unzip SourceFiles="@(BuiltinManifestMsiPackages)"
           DestinationFolder="%(BuiltinManifestMsiPackages.UnzipDestinationFolder)"
           Condition="'@(BuiltinManifestMsiPackages)' != ''" />
  </Target>

  <Target Name="GenerateWorkloadManifestsWxs" DependsOnTargets="UnzipBuiltinWorkloadManifestMsiNuPkg">
    <ItemGroup>
      <_Manifests Include="@(BundledManifests)">
        <MsiPath>$([MSBuild]::NormalizePath($([System.IO.Directory]::GetFiles('%(RestoredMsiNupkgContentPath)/data/', '*$(MsiArchitectureForWorkloadManifests).msi'))))</MsiPath>
      </_Manifests>
      <_Manifests Include="@(BuiltinManifestMsiPackages)" Condition="'@(BuiltinManifestMsiPackages)' != ''">
        <MsiPath>$([MSBuild]::NormalizePath($([System.IO.Directory]::GetFiles('%(BuiltinManifestMsiPackages.UnzipDestinationFolder)\data\', '*$(MsiArchitectureForWorkloadManifests).msi'))))</MsiPath>
      </_Manifests>
    </ItemGroup>

    <PropertyGroup>
      <WorkloadManifestsWxsPath>$(IntermediateOutputPath)WorkloadManifests.wxs</WorkloadManifestsWxsPath>
      <WorkloadManifestsWxsContent>
<![CDATA[
<?xml version="1.0" encoding="utf-8"?>
<!-- Licensed to the .NET Foundation under one or more agreements. The .NET Foundation licenses this file to you under the MIT license. -->
<Wix xmlns="http://schemas.microsoft.com/wix/2006/wi">
    <Fragment>
        <PackageGroup Id="PG_WorkloadManifests">
            @(_Manifests->'<MsiPackage SourceFile="%(MsiPath)">
                <MsiProperty Name="DOTNETHOME" Value="[DOTNETHOME]" />
            </MsiPackage>', '
            ')
        </PackageGroup>
    </Fragment>
</Wix>
]]>
      </WorkloadManifestsWxsContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(WorkloadManifestsWxsPath)"
                      Lines="$(WorkloadManifestsWxsContent)"
                      WriteOnlyWhenDifferent="true"
                      Overwrite="true" />
  </Target>

  <Target Name="GenerateSdkBundle"
          DependsOnTargets="$(GenerateSdkBundleDependsOn)"
          Condition="'$(DotNetBuild)' != 'true' or '$(GenerateSdkBundleOnly)' == 'true'"
          Inputs="$(SdkMSIInstallerFile);
                  $(DownloadedSharedFrameworkInstallerFile);
                  $(DownloadedHostFxrInstallerFile);
                  $(DownloadedSharedHostInstallerFile);
                  $(SdkGenerateBundlePowershellScript)"
          Outputs="$(CombinedFrameworkSdkHostMSIInstallerFile)">
    <!-- Choose "latest" template MSI to go in bundle. -->
    <ItemGroup>
      <LatestTemplateInstallerComponent Include="@(TemplatesMsiComponent)" Condition="'%(TemplatesMajorMinorVersion)' == '$(MajorMinorVersion)'"/>
    </ItemGroup>

    <PropertyGroup>
      <LatestTemplateMsiInstallerFile>@(LatestTemplateInstallerComponent->'%(MSIInstallerFile)')</LatestTemplateMsiInstallerFile>
      <!-- When building the sdk bundle only, the template msi is acquired via DownloadBundledComponents. -->
      <LatestTemplateMsiInstallerFile Condition="'$(GenerateSdkBundleOnly)' == 'true'">$(DownloadsFolder)$(SdkTemplatesMSIInstallerFileName)</LatestTemplateMsiInstallerFile>

      <UpgradePoliciesSrcPath>$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix\bundle\upgradePolicies.wxs</UpgradePoliciesSrcPath>
    </PropertyGroup>

    <GenerateGuidFromName Name="$(SdkBundleInstallerOutputGuidString)">
      <Output TaskParameter="GeneratedGuid" PropertyName="CombinedFrameworkSDKHostInstallerUpgradeCode" />
    </GenerateGuidFromName>

    <Exec Command="powershell -NoProfile -NoLogo $(SdkGenerateBundlePowershellScript) ^
                      -UpgradePoliciesWxsFile '$(UpgradePoliciesSrcPath)' ^
                      -WorkloadManifestWxsFile '$(WorkloadManifestsWxsPath)' ^
                      -CLISDKMSIFile '$(SdkMSIInstallerFile)' ^
                      -ASPNETRuntimeMSIFile '$(DownloadsFolder)$(DownloadedAspNetCoreSharedFxInstallerFileName)' ^
                      -SharedFxMSIFile '$(DownloadsFolder)$(DownloadedSharedFrameworkInstallerFileName)' ^
                      -HostFxrMSIFile '$(DownloadsFolder)$(DownloadedHostFxrInstallerFileName)' ^
                      -SharedHostMSIFile '$(DownloadsFolder)$(DownloadedSharedHostInstallerFileName)' ^
                      -WinFormsAndWpfMSIFile '$(DownloadsFolder)$(DownloadedWinFormsAndWpfSharedFrameworkInstallerFileName)' ^
                      -NetCoreAppTargetingPackMSIFile '$(DownloadsFolder)$(DownloadedNetCoreAppTargetingPackInstallerFileName)' ^
                      -NetStandardTargetingPackMSIFile '$(DownloadsFolder)$(DownloadedNetStandardTargetingPackInstallerFileName)' ^
                      -NetCoreAppHostPackMSIFile '$(DownloadsFolder)$(DownloadedNetCoreAppHostPackInstallerFileName)' ^
                      -AlternateNetCoreAppHostPackMSIFile '$(DownloadsFolder)$(DownloadedAlternateNetCoreAppHostPackInstallerFileName)' ^
                      -Arm64NetCoreAppHostPackMSIFile '$(DownloadsFolder)$(DownloadedArm64NetCoreAppHostPackInstallerFileName)' ^
                      -AspNetTargetingPackMSIFile '$(DownloadsFolder)$(DownloadedAspNetTargetingPackInstallerFileName)' ^
                      -WindowsDesktopTargetingPackMSIFile '$(DownloadsFolder)$(DownloadedWindowsDesktopTargetingPackInstallerFileName)' ^
                      -FinalizerExe '$(FinalizerExe)' ^
                      -TemplatesMSIFile '$(LatestTemplateMsiInstallerFile)' ^
                      -DotnetBundleOutput '$(CombinedFrameworkSdkHostMSIInstallerFile)' ^
                      -WixRoot '$(WixRoot)' ^
                      -ProductMoniker '$(SdkBrandName)' ^
                      -DotnetMSIVersion '$(MsiVersion)' ^
                      -SDKBundleVersion '$(SDKBundleVersion)' ^
                      -DotnetCLINugetVersion '$(Version)' ^
                      -VersionMajor '$(VersionMajor)' ^
                      -VersionMinor '$(VersionMinor)' ^
                      -MinimumVSVersion '$(MinimumVSVersion)' ^
                      -WindowsDesktopVersion '$(MicrosoftWindowsDesktopAppRuntimePackageVersion)' ^
                      -UpgradeCode '$(CombinedFrameworkSDKHostInstallerUpgradeCode)' ^
                      -DependencyKeyName '$(SdkDependencyKeyName)' ^
                      -Architecture '$(TargetArchitecture)' ^
                      -DotNetRuntimeVersion '$(MicrosoftNETCoreAppRuntimePackageVersion)' ^
                      -AspNetCoreVersion '$(MicrosoftAspNetCoreAppRuntimePackageVersion)' ^
                      -SDKProductBandVersion '$(CliProductBandVersion)' ^
                      -InformationAction Continue " />

    <ItemGroup>
      <BundleMsiWixSrcFiles Include="$(WixRoot)\bundle.wixobj" />
      <BundleMsiWixSrcFiles Include="$(WixRoot)\WorkloadManifests.wixobj" />
      <BundleMsiWixSrcFiles Include="$(WixRoot)\upgradePolicies.wixobj" />
    </ItemGroup>

    <CreateLightCommandPackageDrop
      LightCommandWorkingDir="$(LightCommandObjDir)"
      OutputFolder="$(LightCommandPackagesDir)"
      NoLogo="true"
      Cultures="en-us"
      InstallerFile="$(CombinedFrameworkSdkHostMSIInstallerFile)"
      WixExtensions="WixBalExtension;WixUtilExtension;WixTagExtension"
      WixSrcFiles="@(BundleMsiWixSrcFiles)"
      AdditionalBasePaths="$(SdkPkgSourcesWindowsDirectory);$(PkgMicrosoft_DotNet_Build_Tasks_Installers)\build\wix\bundle">
      <Output TaskParameter="OutputFile" PropertyName="_LightCommandPackageNameOutput" />
    </CreateLightCommandPackageDrop>
  </Target>

  <Target Name="GenerateMsis"
          AfterTargets="AfterBuild"
          DependsOnTargets="$(GenerateMsisDependsOn)">
  </Target>

</Project>
